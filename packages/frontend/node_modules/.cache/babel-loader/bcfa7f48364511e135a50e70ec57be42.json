{"ast":null,"code":"import { Contract, BigNumber } from 'ethers';\nimport ManaABI from './abis/Mana.json';\nimport ManaPoolABI from './abis/ManaPool.json';\nimport { MANA_POOL_ADDRESS, xMANA_ADDRESS, MANA_ADDRESS, FLEXIBLE_POOL, LOCKED_POOL } from './constants';\nconst options = {\n  gasLimit: 286750\n};\nlet decimals = BigNumber.from(18);\ndecimals = BigNumber.from(10).pow(decimals);\nexport const getNetwork = chainId => {\n  let network;\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet';\n      break;\n\n    case 97:\n      network = 'Testnet';\n      break;\n\n    default:\n      network = '';\n  }\n\n  return network;\n};\nexport const ManaPoolContract = user => {\n  var _user$library;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_POOL_ADDRESS[network], ManaPoolABI, (_user$library = user.library) === null || _user$library === void 0 ? void 0 : _user$library.getSigner());\n  return contract;\n};\n_c = ManaPoolContract;\nexport const ManaContract = user => {\n  var _user$library2;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_ADDRESS[network], ManaABI, (_user$library2 = user.library) === null || _user$library2 === void 0 ? void 0 : _user$library2.getSigner());\n  return contract;\n};\n_c2 = ManaContract;\nexport const xManaContract = user => {\n  var _user$library3;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(xMANA_ADDRESS[network], ManaABI, (_user$library3 = user.library) === null || _user$library3 === void 0 ? void 0 : _user$library3.getSigner());\n  return contract;\n};\nexport const getManaEarned = async user => {\n  const contract = ManaContract(user);\n  const rewards = await contract.rewardsEarned(user.account);\n  return rewards[0];\n};\nexport const flexiblePoolBalance = async user => {\n  const contract = ManaContract(user);\n  const stakeInfo = await contract.flexiblePool(user.account);\n};\nexport const getMANABalance = async user => {\n  const contract = ManaContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const getxManaBalance = async user => {\n  const contract = xManaContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const userCanUnstakeInLockedPool = async (user, unstakeAmount, setMessage) => {\n  const manaPool = ManaPoolContract(user);\n  let unstake = await canUnstake(user, unstakeAmount, setMessage);\n\n  if (unstake) {\n    unstake = await manaPool.canUnstake();\n\n    if (!unstake) {\n      const [stakeInfo, lockTime] = await Promise.all([manaPool.lockedPool(user.account), manaPool.lockTime]);\n      const harvestTime = stakeInfo.stakedTime.add(lockTime);\n      const now = Math.floor(Date.now());\n      setMessage(`Harvest in ${harvestTime - now} seconds`);\n      return false;\n    }\n  }\n\n  return true;\n};\nexport const userCanUnstakeInFlexiblePool = async (user, unstakeAmount, setMessage) => {\n  return await canUnstake(user, unstakeAmount, setMessage);\n};\n\nconst canUnstake = async (user, unstakeAmount, setMessage) => {\n  const xMana = xManaContract(user);\n  const network = getNetwork(user.chainId);\n  const allowance = await xMana.allowance(user.account, MANA_POOL_ADDRESS[network]);\n\n  if (allowance.lt(unstakeAmount)) {\n    setMessage(`Insufficient xMana allowance`);\n    return false;\n  }\n\n  const xManaBalance = await getxManaBalance(user);\n\n  if (xManaBalance.lt(unstakeAmount)) {\n    setMessage(`Your xMana balance is insufficient to unstake.`);\n    return false;\n  }\n\n  return true;\n};\n\nexport const initiateUnstake = async (user, amount, pool, setMessage) => {\n  let hash;\n  let canUnstake;\n\n  switch (pool) {\n    case LOCKED_POOL:\n      canUnstake = await userCanUnstakeInLockedPool(user, amount, setMessage);\n      if (!canUnstake) return;\n      hash = await lockedUnstake(user, amount);\n      break;\n\n    case FLEXIBLE_POOL:\n      canUnstake = userCanUnstakeInFlexiblePool(user, amount, setMessage);\n      if (!canUnstake) return;\n      hash = await flexibleUnstake(user, amount);\n      break;\n  }\n\n  return hash;\n};\n\nconst lockedUnstake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.unstakeLockedPool(amount);\n  return tx.hash;\n};\n\nconst flexibleUnstake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.unstakeFlexiblePool(amount);\n  return tx.hash;\n};\n\nconst flexibleStake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.stakeInFlexiblePool(amount);\n  return tx.hash;\n};\n\nconst lockedStake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.stakeInLockedPool(amount);\n  return tx.hash;\n};\n\nexport const initateStake = async (user, amount, pool, setMessage) => {\n  const allowance = await manaAllowance(user);\n  console.log('allowance: ', allowance.toString(), allowance.lt(amount), amount.toString());\n\n  if (allowance.lt(amount)) {\n    setMessage('Insufficient MANA allowance');\n    return false;\n  }\n\n  const balance = await getMANABalance(user);\n\n  if (balance.lt(amount)) {\n    setMessage('Insufficient MANA balance');\n    return false;\n  }\n\n  let hash;\n\n  switch (pool) {\n    case FLEXIBLE_POOL:\n      hash = await flexibleStake(user, amount);\n      break;\n\n    case LOCKED_POOL:\n      hash = await lockedStake(user, amount);\n      break;\n  }\n\n  return hash;\n};\nexport const approvexMana = async (user, amount) => {\n  const xMana = xManaContract(user);\n  const txHash = await approve(user, amount, xMana);\n  return txHash;\n};\nexport const approveMana = async (user, amount) => {\n  const mana = ManaContract(user);\n  const txHash = await approve(user, amount, mana);\n  return txHash;\n};\n\nconst approve = async (user, amount, contract) => {\n  const network = getNetwork(user.chainId);\n  const tx = await contract.approve(MANA_POOL_ADDRESS[network], amount, options);\n  return tx.hash;\n};\n\nconst xManaAllowance = async user => {\n  const xMana = xManaContract(user);\n  return await allowance(user, xMana);\n};\n\nconst manaAllowance = async user => {\n  const mana = ManaContract(user);\n  return await allowance(user, mana);\n};\n\nconst allowance = async (user, contract) => {\n  const network = getNetwork(user.chainId);\n  const value = await contract.allowance(user.account, MANA_POOL_ADDRESS[network]);\n  return value;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ManaPoolContract\");\n$RefreshReg$(_c2, \"ManaContract\");","map":{"version":3,"sources":["/Users/kifen/Dev/interview-test/StakePool/packages/frontend/src/services/utils.ts"],"names":["Contract","BigNumber","ManaABI","ManaPoolABI","MANA_POOL_ADDRESS","xMANA_ADDRESS","MANA_ADDRESS","FLEXIBLE_POOL","LOCKED_POOL","options","gasLimit","decimals","from","pow","getNetwork","chainId","network","ManaPoolContract","user","contract","library","getSigner","ManaContract","xManaContract","getManaEarned","rewards","rewardsEarned","account","flexiblePoolBalance","stakeInfo","flexiblePool","getMANABalance","balance","balanceOf","getxManaBalance","userCanUnstakeInLockedPool","unstakeAmount","setMessage","manaPool","unstake","canUnstake","lockTime","Promise","all","lockedPool","harvestTime","stakedTime","add","now","Math","floor","Date","userCanUnstakeInFlexiblePool","xMana","allowance","lt","xManaBalance","initiateUnstake","amount","pool","hash","lockedUnstake","flexibleUnstake","tx","unstakeLockedPool","unstakeFlexiblePool","flexibleStake","stakeInFlexiblePool","lockedStake","stakeInLockedPool","initateStake","manaAllowance","console","log","toString","approvexMana","txHash","approve","approveMana","mana","xManaAllowance","value"],"mappings":"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","sourcesContent":["import { Contract, BigNumber } from 'ethers'\nimport ManaABI from './abis/Mana.json'\nimport ManaPoolABI from './abis/ManaPool.json'\nimport {\n  MANA_POOL_ADDRESS,\n  xMANA_ADDRESS,\n  MANA_ADDRESS,\n  FLEXIBLE_POOL,\n  LOCKED_POOL,\n} from './constants'\nimport { User } from './types'\n\nconst options = { gasLimit: 286750 }\nlet decimals = BigNumber.from(18)\ndecimals = BigNumber.from(10).pow(decimals)\n\nexport const getNetwork = (chainId?: number): string => {\n  let network: string\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet'\n      break\n    case 97:\n      network = 'Testnet'\n      break\n    default:\n      network = ''\n  }\n\n  return network\n}\n\nexport const ManaPoolContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_POOL_ADDRESS[network],\n    ManaPoolABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const ManaContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_ADDRESS[network],\n    ManaABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const xManaContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    xMANA_ADDRESS[network],\n    ManaABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const getManaEarned = async (user: User): Promise<BigNumber> => {\n  const contract = ManaContract(user)\n  const rewards = await contract.rewardsEarned(user.account)\n  return rewards[0]\n}\n\nexport const flexiblePoolBalance = async (user: User): Promise<BigNumber> => {\n  const contract = ManaContract(user)\n  const stakeInfo = await contract.flexiblePool(user.account)\n  \n}\n\nexport const getMANABalance = async (user: User): Promise<BigNumber> => {\n  const contract = ManaContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const getxManaBalance = async (user: User): Promise<BigNumber> => {\n  const contract = xManaContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const userCanUnstakeInLockedPool = async (\n  user: User,\n  unstakeAmount: BigNumber,\n  setMessage: (arg0: string) => void,\n): Promise<boolean> => {\n  const manaPool = ManaPoolContract(user)\n  let unstake = await canUnstake(user, unstakeAmount, setMessage)\n\n  if (unstake) {\n    unstake = await manaPool.canUnstake()\n    if (!unstake) {\n      const [stakeInfo, lockTime] = await Promise.all([\n        manaPool.lockedPool(user.account),\n        manaPool.lockTime,\n      ])\n\n      const harvestTime = stakeInfo.stakedTime.add(lockTime)\n      const now = Math.floor(Date.now())\n      setMessage(`Harvest in ${harvestTime - now} seconds`)\n      return false\n    }\n  }\n\n  return true\n}\n\nexport const userCanUnstakeInFlexiblePool = async (\n  user: User,\n  unstakeAmount: BigNumber,\n  setMessage: (arg0: string) => void,\n): Promise<boolean> => {\n  return await canUnstake(user, unstakeAmount, setMessage)\n}\n\nconst canUnstake = async (\n  user: User,\n  unstakeAmount: BigNumber,\n  setMessage: (arg0: string) => void,\n): Promise<boolean> => {\n  const xMana = xManaContract(user)\n  const network: any = getNetwork(user.chainId)\n  const allowance = await xMana.allowance(\n    user.account,\n    MANA_POOL_ADDRESS[network],\n  )\n\n  if (allowance.lt(unstakeAmount)) {\n    setMessage(`Insufficient xMana allowance`)\n    return false\n  }\n\n  const xManaBalance = await getxManaBalance(user)\n\n  if (xManaBalance.lt(unstakeAmount)) {\n    setMessage(`Your xMana balance is insufficient to unstake.`)\n    return false\n  }\n\n  return true\n}\n\nexport const initiateUnstake = async (\n  user: User,\n  amount: BigNumber,\n  pool: string,\n  setMessage: (arg0: string) => void,\n) => {\n  let hash\n  let canUnstake\n  switch (pool) {\n    case LOCKED_POOL:\n      canUnstake = await userCanUnstakeInLockedPool(user, amount, setMessage)\n\n      if (!canUnstake) return\n      hash = await lockedUnstake(user, amount)\n      break\n    case FLEXIBLE_POOL:\n      canUnstake = userCanUnstakeInFlexiblePool(user, amount, setMessage)\n\n      if (!canUnstake) return\n      hash = await flexibleUnstake(user, amount)\n      break\n  }\n\n  return hash\n}\n\nconst lockedUnstake = async (\n  user: User,\n  amount: BigNumber,\n): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.unstakeLockedPool(amount)\n  return tx.hash\n}\n\nconst flexibleUnstake = async (\n  user: User,\n  amount: BigNumber,\n): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.unstakeFlexiblePool(amount)\n  return tx.hash\n}\n\nconst flexibleStake = async (\n  user: User,\n  amount: BigNumber,\n): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.stakeInFlexiblePool(amount)\n  return tx.hash\n}\n\nconst lockedStake = async (user: User, amount: BigNumber): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.stakeInLockedPool(amount)\n  return tx.hash\n}\n\nexport const initateStake = async (\n  user: User,\n  amount: BigNumber,\n  pool: string,\n  setMessage: (arg0: string) => void,\n) => {\n  const allowance = await manaAllowance(user)\n  console.log(\n    'allowance: ',\n    allowance.toString(),\n    allowance.lt(amount),\n    amount.toString(),\n  )\n  if (allowance.lt(amount)) {\n    setMessage('Insufficient MANA allowance')\n    return false\n  }\n\n  const balance = await getMANABalance(user)\n  if (balance.lt(amount)) {\n    setMessage('Insufficient MANA balance')\n    return false\n  }\n\n  let hash\n  switch (pool) {\n    case FLEXIBLE_POOL:\n      hash = await flexibleStake(user, amount)\n      break\n    case LOCKED_POOL:\n      hash = await lockedStake(user, amount)\n      break\n  }\n  return hash\n}\n\nexport const approvexMana = async (user: User, amount: BigNumber) => {\n  const xMana = xManaContract(user)\n  const txHash = await approve(user, amount, xMana)\n  return txHash\n}\n\nexport const approveMana = async (user: User, amount: BigNumber) => {\n  const mana = ManaContract(user)\n  const txHash = await approve(user, amount, mana)\n  return txHash\n}\n\nconst approve = async (user: User, amount: BigNumber, contract: Contract) => {\n  const network: any = getNetwork(user.chainId)\n  const tx = await contract.approve(MANA_POOL_ADDRESS[network], amount, options)\n  return tx.hash\n}\n\nconst xManaAllowance = async (user: User): Promise<BigNumber> => {\n  const xMana = xManaContract(user)\n  return await allowance(user, xMana)\n}\n\nconst manaAllowance = async (user: User): Promise<BigNumber> => {\n  const mana = ManaContract(user)\n  return await allowance(user, mana)\n}\n\nconst allowance = async (\n  user: User,\n  contract: Contract,\n): Promise<BigNumber> => {\n  const network: any = getNetwork(user.chainId)\n  const value = await contract.allowance(\n    user.account,\n    MANA_POOL_ADDRESS[network],\n  )\n  return value\n}\n"]},"metadata":{},"sourceType":"module"}