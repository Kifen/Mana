{"ast":null,"code":"import { Contract, BigNumber } from 'ethers';\nimport ManaABI from './abis/Mana.json';\nimport ManaPoolABI from './abis/ManaPool.json';\nimport { MANA_POOL_ADDRESS, xMANA_ADDRESS, MANA_ADDRESS, FLEXIBLE_POOL, LOCKED_POOL } from './constants';\nconst options = {\n  gasLimit: 286750\n};\nlet decimals = BigNumber.from(18);\ndecimals = BigNumber.from(10).pow(decimals);\nexport const getNetwork = chainId => {\n  let network;\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet';\n      break;\n\n    case 97:\n      network = 'Testnet';\n      break;\n\n    default:\n      network = '';\n  }\n\n  return network;\n};\nexport const ManaPoolContract = user => {\n  var _user$library;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_POOL_ADDRESS[network], ManaPoolABI, (_user$library = user.library) === null || _user$library === void 0 ? void 0 : _user$library.getSigner());\n  return contract;\n};\n_c = ManaPoolContract;\nexport const ManaContract = user => {\n  var _user$library2;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_ADDRESS[network], ManaABI, (_user$library2 = user.library) === null || _user$library2 === void 0 ? void 0 : _user$library2.getSigner());\n  return contract;\n};\n_c2 = ManaContract;\nexport const xManaContract = user => {\n  var _user$library3;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(xMANA_ADDRESS[network], ManaABI, (_user$library3 = user.library) === null || _user$library3 === void 0 ? void 0 : _user$library3.getSigner());\n  return contract;\n};\nexport const getMANABalance = async user => {\n  const contract = ManaContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const getxManaBalance = async user => {\n  const contract = xManaContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const userCanUnstakeInLockedPool = async (user, unstakeAmount, setMessage) => {\n  const xMana = xManaContract(user);\n  const manaPool = ManaPoolContract(user);\n  const network = getNetwork(user.chainId);\n  const allowance = await xMana.allowance(user.account, MANA_POOL_ADDRESS[network]);\n  const xManaBalance = await getxManaBalance(user);\n\n  if (xManaBalance.lt(unstakeAmount)) {\n    setMessage(`Your xMana balance is insufficient to unstake.`);\n    return false;\n  }\n\n  const canUnstake = await manaPool.canUnstake();\n\n  if (!canUnstake) {\n    const [stakeInfo, lockTime] = await Promise.all([manaPool.lockedPool(user.account), manaPool.lockTime]);\n    const harvestTime = stakeInfo.stakedTime.add(lockTime);\n    const now = Math.floor(Date.now());\n    setMessage(`Harvest in ${harvestTime - now} seconds`);\n    return false;\n  }\n\n  return true;\n};\nexport const initiateUnstake = async (user, amount, pool, setMessage) => {\n  let hash;\n\n  switch (pool) {\n    case LOCKED_POOL:\n      const canUnstake = await userCanUnstakeInLockedPool(user, amount, setMessage);\n      if (!canUnstake) return;\n      hash = await lockedUnstake(user, amount);\n      break;\n\n    case FLEXIBLE_POOL:\n      hash = await flexibleUnstake(user, amount);\n      break;\n  }\n\n  return hash;\n};\n\nconst lockedUnstake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.unstakeLockedPool(amount);\n  return tx.hash;\n};\n\nconst flexibleUnstake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.unstakeFlexiblePool(amount);\n  return tx.hash;\n};\n\nconst flexibleStake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.stakeInFlexiblePool(amount);\n  return tx.hash;\n};\n\nconst lockedStake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.stakeInLockedPool(amount);\n  return tx.hash;\n};\n\nexport const initateStake = async (user, amount, pool, setMessage) => {\n  const allowance = await manaAllowance(user);\n\n  if (allowance.lt(amount)) {\n    setMessage(\"Insufficient MANA allowance\");\n    return false;\n  }\n\n  const balance = await getMANABalance(user);\n\n  if (balance.lt(amount)) {\n    setMessage(\"Insufficient MANA balance\");\n    return false;\n  }\n\n  let hash;\n\n  switch (pool) {\n    case FLEXIBLE_POOL:\n      hash = await flexibleStake(user, amount);\n      break;\n\n    case LOCKED_POOL:\n      hash = await lockedStake(user, amount);\n      break;\n  }\n\n  return hash;\n};\nexport const approvexMana = async (user, amount) => {\n  const xMana = xManaContract(user);\n  const txHash = await approve(user, amount, xMana);\n  return txHash;\n};\nexport const approveMana = async (user, amount) => {\n  const mana = ManaContract(user);\n  const txHash = await approve(user, amount, mana);\n  return txHash;\n};\n\nconst approve = async (user, amount, contract) => {\n  const network = getNetwork(user.chainId);\n  const tx = await contract.approve(MANA_POOL_ADDRESS[network], amount, options);\n  return tx.hash;\n};\n\nconst xManaAllowance = async user => {\n  const xMana = xManaContract(user);\n  return await allowance(user, xMana);\n};\n\nconst manaAllowance = async user => {\n  const mana = ManaContract(user);\n  console.log(mana);\n  return await allowance(user, mana);\n};\n\nconst allowance = async (user, contract) => {\n  const network = getNetwork(user.chainId);\n  const value = await contract.allowance(user.account, MANA_POOL_ADDRESS[network]);\n  return value;\n}; // export const initiateSell = async (\n//   user: User,\n//   amount: BigNumber,\n//   setMessage: (arg0: string) => void,\n// ) => {\n//   const contract = SmartTokenContract(user)\n//   let balance = await contract.balanceOf(user.account)\n//   balance = parseInt(balance.div(decimals).toString(), 10)\n//   if (balance < parseInt(amount.toString(), 10)) {\n//     setMessage(`Your TOK balance is insufficient for this order.`)\n//     return false\n//   }\n//   const sellAmount = BigNumber.from(amount).mul(decimals)\n//   const tx = await contract.sell(sellAmount)\n//   return tx.hash\n// }\n\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ManaPoolContract\");\n$RefreshReg$(_c2, \"ManaContract\");","map":{"version":3,"sources":["/Users/kifen/Dev/interview-test/StakePool/packages/frontend/src/services/utils.ts"],"names":["Contract","BigNumber","ManaABI","ManaPoolABI","MANA_POOL_ADDRESS","xMANA_ADDRESS","MANA_ADDRESS","FLEXIBLE_POOL","LOCKED_POOL","options","gasLimit","decimals","from","pow","getNetwork","chainId","network","ManaPoolContract","user","contract","library","getSigner","ManaContract","xManaContract","getMANABalance","balance","balanceOf","account","getxManaBalance","userCanUnstakeInLockedPool","unstakeAmount","setMessage","xMana","manaPool","allowance","xManaBalance","lt","canUnstake","stakeInfo","lockTime","Promise","all","lockedPool","harvestTime","stakedTime","add","now","Math","floor","Date","initiateUnstake","amount","pool","hash","lockedUnstake","flexibleUnstake","tx","unstakeLockedPool","unstakeFlexiblePool","flexibleStake","stakeInFlexiblePool","lockedStake","stakeInLockedPool","initateStake","manaAllowance","approvexMana","txHash","approve","approveMana","mana","xManaAllowance","console","log","value"],"mappings":"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","sourcesContent":["import { Contract, BigNumber } from 'ethers'\nimport ManaABI from './abis/Mana.json'\nimport ManaPoolABI from './abis/ManaPool.json'\nimport { MANA_POOL_ADDRESS, xMANA_ADDRESS, MANA_ADDRESS, FLEXIBLE_POOL, LOCKED_POOL } from './constants'\nimport { User } from './types'\n\nconst options = { gasLimit: 286750 }\nlet decimals = BigNumber.from(18)\ndecimals = BigNumber.from(10).pow(decimals)\n\nexport const getNetwork = (chainId?: number): string => {\n  let network: string\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet'\n      break\n    case 97:\n      network = 'Testnet'\n      break\n    default:\n      network = ''\n  }\n\n  return network\n}\n\nexport const ManaPoolContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_POOL_ADDRESS[network],\n    ManaPoolABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const ManaContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_ADDRESS[network],\n    ManaABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const xManaContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    xMANA_ADDRESS[network],\n    ManaABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const getMANABalance = async (user: User): Promise<BigNumber> => {\n  const contract = ManaContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const getxManaBalance = async (user: User): Promise<BigNumber> => {\n  const contract = xManaContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const userCanUnstakeInLockedPool = async (\n  user: User,\n  unstakeAmount: BigNumber,\n  setMessage: (arg0: string) => void,\n): Promise<boolean> => {\n  const xMana = xManaContract(user)\n  const manaPool = ManaPoolContract(user)\n\n  const network: any = getNetwork(user.chainId)\n  const allowance = await xMana.allowance(\n    user.account,\n    MANA_POOL_ADDRESS[network],\n  )\n\n  const xManaBalance = await getxManaBalance(user)\n\n  if (xManaBalance.lt(unstakeAmount)) {\n    setMessage(`Your xMana balance is insufficient to unstake.`)\n    return false\n  }\n\n  const canUnstake = await manaPool.canUnstake()\n  if (!canUnstake) {\n    const [stakeInfo, lockTime] = await Promise.all(\n      [\n        manaPool.lockedPool(user.account),\n        manaPool.lockTime\n      ]\n    )\n\n    const harvestTime = stakeInfo.stakedTime.add(lockTime)\n    const now = Math.floor(Date.now())\n    setMessage(`Harvest in ${harvestTime - now} seconds`)\n    return false\n  }\n\n  return true\n}\n\nexport const initiateUnstake = async ( user: User,\n  amount: BigNumber,\n  pool: string,\n  setMessage: (arg0: string) => void) => {\n    let hash;\n\n    switch (pool) {\n      case LOCKED_POOL: \n        const canUnstake = await userCanUnstakeInLockedPool(user, amount, setMessage)\n        if (!canUnstake) return\n        hash = await lockedUnstake(user, amount)\n        break\n      case FLEXIBLE_POOL: \n        hash = await flexibleUnstake(user, amount)\n        break\n    }\n\n    return hash\n}\n\nconst lockedUnstake = async (user: User, amount: BigNumber): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.unstakeLockedPool(amount)\n  return tx.hash\n}\n\nconst flexibleUnstake = async (user: User, amount: BigNumber): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.unstakeFlexiblePool(amount)\n  return tx.hash\n}\n\nconst flexibleStake = async (user: User, amount: BigNumber): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.stakeInFlexiblePool(amount)\n  return tx.hash\n}\n\nconst lockedStake = async (user: User, amount: BigNumber): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.stakeInLockedPool(amount)\n  return tx.hash\n}\n\nexport const initateStake = async (\n  user: User,\n  amount: BigNumber,\n  pool: string,\n  setMessage: (arg0: string) => void,\n) => {\n  const allowance = await manaAllowance(user)\n  if (allowance.lt(amount)) {\n    setMessage(\"Insufficient MANA allowance\")\n    return false\n  }\n\n  const balance = await getMANABalance(user)\n  if (balance.lt(amount)) {\n    setMessage(\"Insufficient MANA balance\")\n    return false\n  }\n\n  let hash\n  switch (pool) {\n    case FLEXIBLE_POOL: \n      hash = await flexibleStake(user, amount)\n      break\n    case LOCKED_POOL:\n      hash = await lockedStake(user, amount)\n      break\n  }\n  return hash\n}\n\nexport const approvexMana = async (user: User, amount: BigNumber) => {\n  const xMana = xManaContract(user)\n  const txHash = await approve(user, amount, xMana);\n  return txHash\n}\n\nexport const approveMana = async (user: User, amount: BigNumber) => {\n  const mana = ManaContract(user)\n  const txHash = await approve(user, amount, mana);\n  return txHash\n}\n\nconst approve = async (user: User, amount: BigNumber, contract: Contract) => {\n  const network: any = getNetwork(user.chainId)\n  const tx = await contract.approve(MANA_POOL_ADDRESS[network], amount, options)\n  return tx.hash\n}\n\nconst xManaAllowance = async(user: User): Promise<BigNumber> => {\n  const xMana = xManaContract(user)\n  return await allowance(user, xMana)\n}\n\nconst manaAllowance = async(user: User): Promise<BigNumber> => {\n  const mana = ManaContract(user)\n  console.log(mana)\n  return await allowance(user, mana)\n}\n\nconst allowance = async (user: User, contract: Contract): Promise<BigNumber> => {\n  const network: any = getNetwork(user.chainId)\n  const value = await contract.allowance(user.account, MANA_POOL_ADDRESS[network])\n  return value\n}\n\n// export const initiateSell = async (\n//   user: User,\n//   amount: BigNumber,\n//   setMessage: (arg0: string) => void,\n// ) => {\n//   const contract = SmartTokenContract(user)\n//   let balance = await contract.balanceOf(user.account)\n//   balance = parseInt(balance.div(decimals).toString(), 10)\n\n//   if (balance < parseInt(amount.toString(), 10)) {\n//     setMessage(`Your TOK balance is insufficient for this order.`)\n//     return false\n//   }\n//   const sellAmount = BigNumber.from(amount).mul(decimals)\n//   const tx = await contract.sell(sellAmount)\n//   return tx.hash\n// }\n"]},"metadata":{},"sourceType":"module"}