{"ast":null,"code":"import { Contract, BigNumber } from 'ethers';\nimport ManaABI from './abis/Mana.json';\nimport ManaPoolABI from './abis/ManaPool.json';\nimport { MANA_POOL_ADDRESS, xMANA_ADDRESS, MANA_ADDRESS, FLEXIBLE_POOL, LOCKED_POOL } from './constants';\nconst options = {\n  gasLimit: 286750\n};\nlet decimals = BigNumber.from(18);\ndecimals = BigNumber.from(10).pow(decimals);\nexport const getNetwork = chainId => {\n  let network;\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet';\n      break;\n\n    case 97:\n      network = 'Testnet';\n      break;\n\n    default:\n      network = '';\n  }\n\n  return network;\n};\nexport const ManaPoolContract = user => {\n  var _user$library;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_POOL_ADDRESS[network], ManaPoolABI, (_user$library = user.library) === null || _user$library === void 0 ? void 0 : _user$library.getSigner());\n  return contract;\n};\n_c = ManaPoolContract;\nexport const ManaContract = user => {\n  var _user$library2;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_ADDRESS[network], ManaABI, (_user$library2 = user.library) === null || _user$library2 === void 0 ? void 0 : _user$library2.getSigner());\n  return contract;\n};\n_c2 = ManaContract;\nexport const xManaContract = user => {\n  var _user$library3;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(xMANA_ADDRESS[network], ManaABI, (_user$library3 = user.library) === null || _user$library3 === void 0 ? void 0 : _user$library3.getSigner());\n  return contract;\n};\nexport const getManaEarned = async user => {\n  const contract = ManaPoolContract(user);\n  const rewards = await contract.rewardsEarned(user.account);\n  return rewards;\n};\nexport const getFlexiblePoolBalance = async (user) => {\n  const contract = ManaPoolContract(user);\n  const stakeInfo = await contract.flexiblePool(user.account);\n  return stakeInfo.xManaTokens;\n};\nexport const getLockedPoolBalance = async user => {\n  const contract = ManaPoolContract(user);\n  const stakeInfo = await contract.lockedPool(user.account);\n  return stakeInfo.manaTokens;\n};\nexport const getMANABalance = async user => {\n  const contract = ManaContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const getxManaBalance = async user => {\n  const contract = xManaContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const userCanUnstakeInLockedPool = async (user, unstakeAmount, setMessage) => {\n  const manaPool = ManaPoolContract(user);\n  let unstake = await canUnstake(user, unstakeAmount, setMessage);\n\n  if (unstake) {\n    unstake = await manaPool.canUnstake();\n\n    if (!unstake) {\n      const [stakeInfo, lockTime] = await Promise.all([manaPool.lockedPool(user.account), manaPool.lockTime]);\n      const harvestTime = stakeInfo.stakedTime.add(lockTime);\n      const now = Math.floor(Date.now());\n      setMessage(`Harvest in ${harvestTime - now} seconds`);\n      return false;\n    }\n  }\n\n  return true;\n};\nexport const userCanUnstakeInFlexiblePool = async (user, unstakeAmount, setMessage) => {\n  return await canUnstake(user, unstakeAmount, setMessage);\n};\n\nconst canUnstake = async (user, unstakeAmount, setMessage) => {\n  const xMana = xManaContract(user);\n  const network = getNetwork(user.chainId);\n  const allowance = await xMana.allowance(user.account, MANA_POOL_ADDRESS[network]);\n\n  if (allowance.lt(unstakeAmount)) {\n    setMessage(`Insufficient xMana allowance`);\n    return false;\n  }\n\n  const xManaBalance = await getxManaBalance(user);\n\n  if (xManaBalance.lt(unstakeAmount)) {\n    setMessage(`Your xMana balance is insufficient to unstake.`);\n    return false;\n  }\n\n  return true;\n};\n\nexport const initiateUnstake = async (user, amount, pool, setMessage) => {\n  let hash;\n  let canUnstake;\n\n  switch (pool) {\n    case LOCKED_POOL:\n      canUnstake = await userCanUnstakeInLockedPool(user, amount, setMessage);\n      if (!canUnstake) return;\n      hash = await lockedUnstake(user, amount);\n      break;\n\n    case FLEXIBLE_POOL:\n      canUnstake = userCanUnstakeInFlexiblePool(user, amount, setMessage);\n      if (!canUnstake) return;\n      hash = await flexibleUnstake(user, amount);\n      break;\n  }\n\n  return hash;\n};\n\nconst lockedUnstake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.unstakeLockedPool(amount);\n  return tx.hash;\n};\n\nconst flexibleUnstake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.unstakeFlexiblePool(amount);\n  return tx.hash;\n};\n\nconst flexibleStake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.stakeInFlexiblePool(amount);\n  return tx.hash;\n};\n\nconst lockedStake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.stakeInLockedPool(amount);\n  return tx.hash;\n};\n\nexport const initateStake = async (user, amount, pool, setMessage) => {\n  const allowance = await manaAllowance(user);\n  console.log('allowance: ', allowance.toString(), allowance.lt(amount), amount.toString());\n\n  if (allowance.lt(amount)) {\n    setMessage('Insufficient MANA allowance');\n    return false;\n  }\n\n  const balance = await getMANABalance(user);\n\n  if (balance.lt(amount)) {\n    setMessage('Insufficient MANA balance');\n    return false;\n  }\n\n  let hash;\n\n  switch (pool) {\n    case FLEXIBLE_POOL:\n      hash = await flexibleStake(user, amount);\n      break;\n\n    case LOCKED_POOL:\n      hash = await lockedStake(user, amount);\n      break;\n  }\n\n  return hash;\n};\nexport const approvexMana = async (user, amount) => {\n  const xMana = xManaContract(user);\n  const txHash = await approve(user, amount, xMana);\n  return txHash;\n};\nexport const approveMana = async (user, amount) => {\n  const mana = ManaContract(user);\n  const txHash = await approve(user, amount, mana);\n  return txHash;\n};\n\nconst approve = async (user, amount, contract) => {\n  const network = getNetwork(user.chainId);\n  const tx = await contract.approve(MANA_POOL_ADDRESS[network], amount, options);\n  return tx.hash;\n};\n\nconst xManaAllowance = async user => {\n  const xMana = xManaContract(user);\n  return await allowance(user, xMana);\n};\n\nconst manaAllowance = async user => {\n  const mana = ManaContract(user);\n  return await allowance(user, mana);\n};\n\nconst allowance = async (user, contract) => {\n  const network = getNetwork(user.chainId);\n  const value = await contract.allowance(user.account, MANA_POOL_ADDRESS[network]);\n  return value;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ManaPoolContract\");\n$RefreshReg$(_c2, \"ManaContract\");","map":{"version":3,"sources":["/Users/kifen/Dev/interview-test/StakePool/packages/frontend/src/services/utils.ts"],"names":["Contract","BigNumber","ManaABI","ManaPoolABI","MANA_POOL_ADDRESS","xMANA_ADDRESS","MANA_ADDRESS","FLEXIBLE_POOL","LOCKED_POOL","options","gasLimit","decimals","from","pow","getNetwork","chainId","network","ManaPoolContract","user","contract","library","getSigner","ManaContract","xManaContract","getManaEarned","rewards","rewardsEarned","account","getFlexiblePoolBalance","stakeInfo","flexiblePool","xManaTokens","getLockedPoolBalance","lockedPool","manaTokens","getMANABalance","balance","balanceOf","getxManaBalance","userCanUnstakeInLockedPool","unstakeAmount","setMessage","manaPool","unstake","canUnstake","lockTime","Promise","all","harvestTime","stakedTime","add","now","Math","floor","Date","userCanUnstakeInFlexiblePool","xMana","allowance","lt","xManaBalance","initiateUnstake","amount","pool","hash","lockedUnstake","flexibleUnstake","tx","unstakeLockedPool","unstakeFlexiblePool","flexibleStake","stakeInFlexiblePool","lockedStake","stakeInLockedPool","initateStake","manaAllowance","console","log","toString","approvexMana","txHash","approve","approveMana","mana","xManaAllowance","value"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,QAApC;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SACEC,iBADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,aAJF,EAKEC,WALF,QAMO,aANP;AASA,MAAMC,OAAO,GAAG;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAhB;AACA,IAAIC,QAAQ,GAAGV,SAAS,CAACW,IAAV,CAAe,EAAf,CAAf;AACAD,QAAQ,GAAGV,SAAS,CAACW,IAAV,CAAe,EAAf,EAAmBC,GAAnB,CAAuBF,QAAvB,CAAX;AAEA,OAAO,MAAMG,UAAU,GAAIC,OAAD,IAA8B;AACtD,MAAIC,OAAJ;;AAEA,UAAQD,OAAR;AACE,SAAK,EAAL;AACEC,MAAAA,OAAO,GAAG,SAAV;AACA;;AACF,SAAK,EAAL;AACEA,MAAAA,OAAO,GAAG,SAAV;AACA;;AACF;AACEA,MAAAA,OAAO,GAAG,EAAV;AARJ;;AAWA,SAAOA,OAAP;AACD,CAfM;AAiBP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,IAA0B;AAAA;;AACxD,QAAMF,OAAY,GAAGF,UAAU,CAACI,IAAI,CAACH,OAAN,CAA/B;AACA,QAAMI,QAAQ,GAAG,IAAInB,QAAJ,CACfI,iBAAiB,CAACY,OAAD,CADF,EAEfb,WAFe,mBAGfe,IAAI,CAACE,OAHU,kDAGf,cAAcC,SAAd,EAHe,CAAjB;AAMA,SAAOF,QAAP;AACD,CATM;KAAMF,gB;AAWb,OAAO,MAAMK,YAAY,GAAIJ,IAAD,IAA0B;AAAA;;AACpD,QAAMF,OAAY,GAAGF,UAAU,CAACI,IAAI,CAACH,OAAN,CAA/B;AACA,QAAMI,QAAQ,GAAG,IAAInB,QAAJ,CACfM,YAAY,CAACU,OAAD,CADG,EAEfd,OAFe,oBAGfgB,IAAI,CAACE,OAHU,mDAGf,eAAcC,SAAd,EAHe,CAAjB;AAMA,SAAOF,QAAP;AACD,CATM;MAAMG,Y;AAWb,OAAO,MAAMC,aAAa,GAAIL,IAAD,IAA0B;AAAA;;AACrD,QAAMF,OAAY,GAAGF,UAAU,CAACI,IAAI,CAACH,OAAN,CAA/B;AACA,QAAMI,QAAQ,GAAG,IAAInB,QAAJ,CACfK,aAAa,CAACW,OAAD,CADE,EAEfd,OAFe,oBAGfgB,IAAI,CAACE,OAHU,mDAGf,eAAcC,SAAd,EAHe,CAAjB;AAMA,SAAOF,QAAP;AACD,CATM;AAWP,OAAO,MAAMK,aAAa,GAAG,MAAON,IAAP,IAA0C;AACrE,QAAMC,QAAQ,GAAGF,gBAAgB,CAACC,IAAD,CAAjC;AACA,QAAMO,OAAO,GAAG,MAAMN,QAAQ,CAACO,aAAT,CAAuBR,IAAI,CAACS,OAA5B,CAAtB;AACA,SAAOF,OAAP;AACD,CAJM;AAMP,OAAO,MAAMG,sBAAsB,GAAG,OACpCV,IADoC,KAEb;AACvB,QAAMC,QAAQ,GAAGF,gBAAgB,CAACC,IAAD,CAAjC;AACA,QAAMW,SAAS,GAAG,MAAMV,QAAQ,CAACW,YAAT,CAAsBZ,IAAI,CAACS,OAA3B,CAAxB;AACA,SAAOE,SAAS,CAACE,WAAjB;AACD,CANM;AAQP,OAAO,MAAMC,oBAAoB,GAAG,MAAOd,IAAP,IAA0C;AAC5E,QAAMC,QAAQ,GAAGF,gBAAgB,CAACC,IAAD,CAAjC;AACA,QAAMW,SAAS,GAAG,MAAMV,QAAQ,CAACc,UAAT,CAAoBf,IAAI,CAACS,OAAzB,CAAxB;AACA,SAAOE,SAAS,CAACK,UAAjB;AACD,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAG,MAAOjB,IAAP,IAA0C;AACtE,QAAMC,QAAQ,GAAGG,YAAY,CAACJ,IAAD,CAA7B;AACA,QAAMkB,OAAO,GAAG,MAAMjB,QAAQ,CAACkB,SAAT,CAAmBnB,IAAI,CAACS,OAAxB,CAAtB;AACA,SAAOS,OAAP;AACD,CAJM;AAMP,OAAO,MAAME,eAAe,GAAG,MAAOpB,IAAP,IAA0C;AACvE,QAAMC,QAAQ,GAAGI,aAAa,CAACL,IAAD,CAA9B;AACA,QAAMkB,OAAO,GAAG,MAAMjB,QAAQ,CAACkB,SAAT,CAAmBnB,IAAI,CAACS,OAAxB,CAAtB;AACA,SAAOS,OAAP;AACD,CAJM;AAMP,OAAO,MAAMG,0BAA0B,GAAG,OACxCrB,IADwC,EAExCsB,aAFwC,EAGxCC,UAHwC,KAInB;AACrB,QAAMC,QAAQ,GAAGzB,gBAAgB,CAACC,IAAD,CAAjC;AACA,MAAIyB,OAAO,GAAG,MAAMC,UAAU,CAAC1B,IAAD,EAAOsB,aAAP,EAAsBC,UAAtB,CAA9B;;AAEA,MAAIE,OAAJ,EAAa;AACXA,IAAAA,OAAO,GAAG,MAAMD,QAAQ,CAACE,UAAT,EAAhB;;AACA,QAAI,CAACD,OAAL,EAAc;AACZ,YAAM,CAACd,SAAD,EAAYgB,QAAZ,IAAwB,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC9CL,QAAQ,CAACT,UAAT,CAAoBf,IAAI,CAACS,OAAzB,CAD8C,EAE9Ce,QAAQ,CAACG,QAFqC,CAAZ,CAApC;AAKA,YAAMG,WAAW,GAAGnB,SAAS,CAACoB,UAAV,CAAqBC,GAArB,CAAyBL,QAAzB,CAApB;AACA,YAAMM,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,GAAL,EAAX,CAAZ;AACAV,MAAAA,UAAU,CAAE,cAAaO,WAAW,GAAGG,GAAI,UAAjC,CAAV;AACA,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAxBM;AA0BP,OAAO,MAAMI,4BAA4B,GAAG,OAC1CrC,IAD0C,EAE1CsB,aAF0C,EAG1CC,UAH0C,KAIrB;AACrB,SAAO,MAAMG,UAAU,CAAC1B,IAAD,EAAOsB,aAAP,EAAsBC,UAAtB,CAAvB;AACD,CANM;;AAQP,MAAMG,UAAU,GAAG,OACjB1B,IADiB,EAEjBsB,aAFiB,EAGjBC,UAHiB,KAII;AACrB,QAAMe,KAAK,GAAGjC,aAAa,CAACL,IAAD,CAA3B;AACA,QAAMF,OAAY,GAAGF,UAAU,CAACI,IAAI,CAACH,OAAN,CAA/B;AACA,QAAM0C,SAAS,GAAG,MAAMD,KAAK,CAACC,SAAN,CACtBvC,IAAI,CAACS,OADiB,EAEtBvB,iBAAiB,CAACY,OAAD,CAFK,CAAxB;;AAKA,MAAIyC,SAAS,CAACC,EAAV,CAAalB,aAAb,CAAJ,EAAiC;AAC/BC,IAAAA,UAAU,CAAE,8BAAF,CAAV;AACA,WAAO,KAAP;AACD;;AAED,QAAMkB,YAAY,GAAG,MAAMrB,eAAe,CAACpB,IAAD,CAA1C;;AAEA,MAAIyC,YAAY,CAACD,EAAb,CAAgBlB,aAAhB,CAAJ,EAAoC;AAClCC,IAAAA,UAAU,CAAE,gDAAF,CAAV;AACA,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD,CAzBD;;AA2BA,OAAO,MAAMmB,eAAe,GAAG,OAC7B1C,IAD6B,EAE7B2C,MAF6B,EAG7BC,IAH6B,EAI7BrB,UAJ6B,KAK1B;AACH,MAAIsB,IAAJ;AACA,MAAInB,UAAJ;;AACA,UAAQkB,IAAR;AACE,SAAKtD,WAAL;AACEoC,MAAAA,UAAU,GAAG,MAAML,0BAA0B,CAACrB,IAAD,EAAO2C,MAAP,EAAepB,UAAf,CAA7C;AAEA,UAAI,CAACG,UAAL,EAAiB;AACjBmB,MAAAA,IAAI,GAAG,MAAMC,aAAa,CAAC9C,IAAD,EAAO2C,MAAP,CAA1B;AACA;;AACF,SAAKtD,aAAL;AACEqC,MAAAA,UAAU,GAAGW,4BAA4B,CAACrC,IAAD,EAAO2C,MAAP,EAAepB,UAAf,CAAzC;AAEA,UAAI,CAACG,UAAL,EAAiB;AACjBmB,MAAAA,IAAI,GAAG,MAAME,eAAe,CAAC/C,IAAD,EAAO2C,MAAP,CAA5B;AACA;AAZJ;;AAeA,SAAOE,IAAP;AACD,CAxBM;;AA0BP,MAAMC,aAAa,GAAG,OACpB9C,IADoB,EAEpB2C,MAFoB,KAGA;AACpB,QAAM1C,QAAQ,GAAGF,gBAAgB,CAACC,IAAD,CAAjC;AACA,QAAMgD,EAAE,GAAG,MAAM/C,QAAQ,CAACgD,iBAAT,CAA2BN,MAA3B,CAAjB;AACA,SAAOK,EAAE,CAACH,IAAV;AACD,CAPD;;AASA,MAAME,eAAe,GAAG,OACtB/C,IADsB,EAEtB2C,MAFsB,KAGF;AACpB,QAAM1C,QAAQ,GAAGF,gBAAgB,CAACC,IAAD,CAAjC;AACA,QAAMgD,EAAE,GAAG,MAAM/C,QAAQ,CAACiD,mBAAT,CAA6BP,MAA7B,CAAjB;AACA,SAAOK,EAAE,CAACH,IAAV;AACD,CAPD;;AASA,MAAMM,aAAa,GAAG,OACpBnD,IADoB,EAEpB2C,MAFoB,KAGA;AACpB,QAAM1C,QAAQ,GAAGF,gBAAgB,CAACC,IAAD,CAAjC;AACA,QAAMgD,EAAE,GAAG,MAAM/C,QAAQ,CAACmD,mBAAT,CAA6BT,MAA7B,CAAjB;AACA,SAAOK,EAAE,CAACH,IAAV;AACD,CAPD;;AASA,MAAMQ,WAAW,GAAG,OAAOrD,IAAP,EAAmB2C,MAAnB,KAA0D;AAC5E,QAAM1C,QAAQ,GAAGF,gBAAgB,CAACC,IAAD,CAAjC;AACA,QAAMgD,EAAE,GAAG,MAAM/C,QAAQ,CAACqD,iBAAT,CAA2BX,MAA3B,CAAjB;AACA,SAAOK,EAAE,CAACH,IAAV;AACD,CAJD;;AAMA,OAAO,MAAMU,YAAY,GAAG,OAC1BvD,IAD0B,EAE1B2C,MAF0B,EAG1BC,IAH0B,EAI1BrB,UAJ0B,KAKvB;AACH,QAAMgB,SAAS,GAAG,MAAMiB,aAAa,CAACxD,IAAD,CAArC;AACAyD,EAAAA,OAAO,CAACC,GAAR,CACE,aADF,EAEEnB,SAAS,CAACoB,QAAV,EAFF,EAGEpB,SAAS,CAACC,EAAV,CAAaG,MAAb,CAHF,EAIEA,MAAM,CAACgB,QAAP,EAJF;;AAMA,MAAIpB,SAAS,CAACC,EAAV,CAAaG,MAAb,CAAJ,EAA0B;AACxBpB,IAAAA,UAAU,CAAC,6BAAD,CAAV;AACA,WAAO,KAAP;AACD;;AAED,QAAML,OAAO,GAAG,MAAMD,cAAc,CAACjB,IAAD,CAApC;;AACA,MAAIkB,OAAO,CAACsB,EAAR,CAAWG,MAAX,CAAJ,EAAwB;AACtBpB,IAAAA,UAAU,CAAC,2BAAD,CAAV;AACA,WAAO,KAAP;AACD;;AAED,MAAIsB,IAAJ;;AACA,UAAQD,IAAR;AACE,SAAKvD,aAAL;AACEwD,MAAAA,IAAI,GAAG,MAAMM,aAAa,CAACnD,IAAD,EAAO2C,MAAP,CAA1B;AACA;;AACF,SAAKrD,WAAL;AACEuD,MAAAA,IAAI,GAAG,MAAMQ,WAAW,CAACrD,IAAD,EAAO2C,MAAP,CAAxB;AACA;AANJ;;AAQA,SAAOE,IAAP;AACD,CAlCM;AAoCP,OAAO,MAAMe,YAAY,GAAG,OAAO5D,IAAP,EAAmB2C,MAAnB,KAAyC;AACnE,QAAML,KAAK,GAAGjC,aAAa,CAACL,IAAD,CAA3B;AACA,QAAM6D,MAAM,GAAG,MAAMC,OAAO,CAAC9D,IAAD,EAAO2C,MAAP,EAAeL,KAAf,CAA5B;AACA,SAAOuB,MAAP;AACD,CAJM;AAMP,OAAO,MAAME,WAAW,GAAG,OAAO/D,IAAP,EAAmB2C,MAAnB,KAAyC;AAClE,QAAMqB,IAAI,GAAG5D,YAAY,CAACJ,IAAD,CAAzB;AACA,QAAM6D,MAAM,GAAG,MAAMC,OAAO,CAAC9D,IAAD,EAAO2C,MAAP,EAAeqB,IAAf,CAA5B;AACA,SAAOH,MAAP;AACD,CAJM;;AAMP,MAAMC,OAAO,GAAG,OAAO9D,IAAP,EAAmB2C,MAAnB,EAAsC1C,QAAtC,KAA6D;AAC3E,QAAMH,OAAY,GAAGF,UAAU,CAACI,IAAI,CAACH,OAAN,CAA/B;AACA,QAAMmD,EAAE,GAAG,MAAM/C,QAAQ,CAAC6D,OAAT,CAAiB5E,iBAAiB,CAACY,OAAD,CAAlC,EAA6C6C,MAA7C,EAAqDpD,OAArD,CAAjB;AACA,SAAOyD,EAAE,CAACH,IAAV;AACD,CAJD;;AAMA,MAAMoB,cAAc,GAAG,MAAOjE,IAAP,IAA0C;AAC/D,QAAMsC,KAAK,GAAGjC,aAAa,CAACL,IAAD,CAA3B;AACA,SAAO,MAAMuC,SAAS,CAACvC,IAAD,EAAOsC,KAAP,CAAtB;AACD,CAHD;;AAKA,MAAMkB,aAAa,GAAG,MAAOxD,IAAP,IAA0C;AAC9D,QAAMgE,IAAI,GAAG5D,YAAY,CAACJ,IAAD,CAAzB;AACA,SAAO,MAAMuC,SAAS,CAACvC,IAAD,EAAOgE,IAAP,CAAtB;AACD,CAHD;;AAKA,MAAMzB,SAAS,GAAG,OAChBvC,IADgB,EAEhBC,QAFgB,KAGO;AACvB,QAAMH,OAAY,GAAGF,UAAU,CAACI,IAAI,CAACH,OAAN,CAA/B;AACA,QAAMqE,KAAK,GAAG,MAAMjE,QAAQ,CAACsC,SAAT,CAClBvC,IAAI,CAACS,OADa,EAElBvB,iBAAiB,CAACY,OAAD,CAFC,CAApB;AAIA,SAAOoE,KAAP;AACD,CAVD","sourcesContent":["import { Contract, BigNumber } from 'ethers'\nimport ManaABI from './abis/Mana.json'\nimport ManaPoolABI from './abis/ManaPool.json'\nimport {\n  MANA_POOL_ADDRESS,\n  xMANA_ADDRESS,\n  MANA_ADDRESS,\n  FLEXIBLE_POOL,\n  LOCKED_POOL,\n} from './constants'\nimport { User } from './types'\n\nconst options = { gasLimit: 286750 }\nlet decimals = BigNumber.from(18)\ndecimals = BigNumber.from(10).pow(decimals)\n\nexport const getNetwork = (chainId?: number): string => {\n  let network: string\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet'\n      break\n    case 97:\n      network = 'Testnet'\n      break\n    default:\n      network = ''\n  }\n\n  return network\n}\n\nexport const ManaPoolContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_POOL_ADDRESS[network],\n    ManaPoolABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const ManaContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_ADDRESS[network],\n    ManaABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const xManaContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    xMANA_ADDRESS[network],\n    ManaABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const getManaEarned = async (user: User): Promise<BigNumber> => {\n  const contract = ManaPoolContract(user)\n  const rewards = await contract.rewardsEarned(user.account)\n  return rewards\n}\n\nexport const getFlexiblePoolBalance = async (\n  user: User,\n): Promise<BigNumber> => {\n  const contract = ManaPoolContract(user)\n  const stakeInfo = await contract.flexiblePool(user.account)\n  return stakeInfo.xManaTokens\n}\n\nexport const getLockedPoolBalance = async (user: User): Promise<BigNumber> => {\n  const contract = ManaPoolContract(user)\n  const stakeInfo = await contract.lockedPool(user.account)\n  return stakeInfo.manaTokens\n}\n\nexport const getMANABalance = async (user: User): Promise<BigNumber> => {\n  const contract = ManaContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const getxManaBalance = async (user: User): Promise<BigNumber> => {\n  const contract = xManaContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const userCanUnstakeInLockedPool = async (\n  user: User,\n  unstakeAmount: BigNumber,\n  setMessage: (arg0: string) => void,\n): Promise<boolean> => {\n  const manaPool = ManaPoolContract(user)\n  let unstake = await canUnstake(user, unstakeAmount, setMessage)\n\n  if (unstake) {\n    unstake = await manaPool.canUnstake()\n    if (!unstake) {\n      const [stakeInfo, lockTime] = await Promise.all([\n        manaPool.lockedPool(user.account),\n        manaPool.lockTime,\n      ])\n\n      const harvestTime = stakeInfo.stakedTime.add(lockTime)\n      const now = Math.floor(Date.now())\n      setMessage(`Harvest in ${harvestTime - now} seconds`)\n      return false\n    }\n  }\n\n  return true\n}\n\nexport const userCanUnstakeInFlexiblePool = async (\n  user: User,\n  unstakeAmount: BigNumber,\n  setMessage: (arg0: string) => void,\n): Promise<boolean> => {\n  return await canUnstake(user, unstakeAmount, setMessage)\n}\n\nconst canUnstake = async (\n  user: User,\n  unstakeAmount: BigNumber,\n  setMessage: (arg0: string) => void,\n): Promise<boolean> => {\n  const xMana = xManaContract(user)\n  const network: any = getNetwork(user.chainId)\n  const allowance = await xMana.allowance(\n    user.account,\n    MANA_POOL_ADDRESS[network],\n  )\n\n  if (allowance.lt(unstakeAmount)) {\n    setMessage(`Insufficient xMana allowance`)\n    return false\n  }\n\n  const xManaBalance = await getxManaBalance(user)\n\n  if (xManaBalance.lt(unstakeAmount)) {\n    setMessage(`Your xMana balance is insufficient to unstake.`)\n    return false\n  }\n\n  return true\n}\n\nexport const initiateUnstake = async (\n  user: User,\n  amount: BigNumber,\n  pool: string,\n  setMessage: (arg0: string) => void,\n) => {\n  let hash\n  let canUnstake\n  switch (pool) {\n    case LOCKED_POOL:\n      canUnstake = await userCanUnstakeInLockedPool(user, amount, setMessage)\n\n      if (!canUnstake) return\n      hash = await lockedUnstake(user, amount)\n      break\n    case FLEXIBLE_POOL:\n      canUnstake = userCanUnstakeInFlexiblePool(user, amount, setMessage)\n\n      if (!canUnstake) return\n      hash = await flexibleUnstake(user, amount)\n      break\n  }\n\n  return hash\n}\n\nconst lockedUnstake = async (\n  user: User,\n  amount: BigNumber,\n): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.unstakeLockedPool(amount)\n  return tx.hash\n}\n\nconst flexibleUnstake = async (\n  user: User,\n  amount: BigNumber,\n): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.unstakeFlexiblePool(amount)\n  return tx.hash\n}\n\nconst flexibleStake = async (\n  user: User,\n  amount: BigNumber,\n): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.stakeInFlexiblePool(amount)\n  return tx.hash\n}\n\nconst lockedStake = async (user: User, amount: BigNumber): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.stakeInLockedPool(amount)\n  return tx.hash\n}\n\nexport const initateStake = async (\n  user: User,\n  amount: BigNumber,\n  pool: string,\n  setMessage: (arg0: string) => void,\n) => {\n  const allowance = await manaAllowance(user)\n  console.log(\n    'allowance: ',\n    allowance.toString(),\n    allowance.lt(amount),\n    amount.toString(),\n  )\n  if (allowance.lt(amount)) {\n    setMessage('Insufficient MANA allowance')\n    return false\n  }\n\n  const balance = await getMANABalance(user)\n  if (balance.lt(amount)) {\n    setMessage('Insufficient MANA balance')\n    return false\n  }\n\n  let hash\n  switch (pool) {\n    case FLEXIBLE_POOL:\n      hash = await flexibleStake(user, amount)\n      break\n    case LOCKED_POOL:\n      hash = await lockedStake(user, amount)\n      break\n  }\n  return hash\n}\n\nexport const approvexMana = async (user: User, amount: BigNumber) => {\n  const xMana = xManaContract(user)\n  const txHash = await approve(user, amount, xMana)\n  return txHash\n}\n\nexport const approveMana = async (user: User, amount: BigNumber) => {\n  const mana = ManaContract(user)\n  const txHash = await approve(user, amount, mana)\n  return txHash\n}\n\nconst approve = async (user: User, amount: BigNumber, contract: Contract) => {\n  const network: any = getNetwork(user.chainId)\n  const tx = await contract.approve(MANA_POOL_ADDRESS[network], amount, options)\n  return tx.hash\n}\n\nconst xManaAllowance = async (user: User): Promise<BigNumber> => {\n  const xMana = xManaContract(user)\n  return await allowance(user, xMana)\n}\n\nconst manaAllowance = async (user: User): Promise<BigNumber> => {\n  const mana = ManaContract(user)\n  return await allowance(user, mana)\n}\n\nconst allowance = async (\n  user: User,\n  contract: Contract,\n): Promise<BigNumber> => {\n  const network: any = getNetwork(user.chainId)\n  const value = await contract.allowance(\n    user.account,\n    MANA_POOL_ADDRESS[network],\n  )\n  return value\n}\n"]},"metadata":{},"sourceType":"module"}