{"ast":null,"code":"import { Contract, BigNumber } from 'ethers';\nimport ManaABI from './abis/Mana.json';\nimport ManaPoolABI from './abis/ManaPool.json';\nimport { MANA_POOL_ADDRESS, MANA_ADDRESS } from './constants';\nconst options = {\n  gasLimit: 286750\n};\nlet decimals = BigNumber.from(18);\ndecimals = BigNumber.from(10).pow(decimals);\nexport const getNetwork = chainId => {\n  let network;\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet';\n      break;\n\n    case 97:\n      network = 'Testnet';\n      break;\n\n    default:\n      network = '';\n  }\n\n  return network;\n};\nexport const ManaPoolContract = user => {\n  var _user$library;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_POOL_ADDRESS[network], ManaPoolABI, (_user$library = user.library) === null || _user$library === void 0 ? void 0 : _user$library.getSigner());\n  return contract;\n};\n_c = ManaPoolContract;\nexport const ManaContract = user => {\n  var _user$library2;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_ADDRESS[network], ManaABI.abi, (_user$library2 = user.library) === null || _user$library2 === void 0 ? void 0 : _user$library2.getSigner());\n  return contract;\n};\n_c2 = ManaContract;\nexport const getTOKBalance = async user => {\n  const contract = SmartTokenContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const getDAIBalance = async user => {\n  const contract = daiContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const getBuyPrice = async (user, amount, supply) => {\n  const contract = SmartTokenContract(user);\n  const buyPrice = await contract.calculatePurchaseReturn(supply, amount);\n  return buyPrice;\n};\nexport const userCanBuy = async (user, amount, totalSupply, setMessage) => {\n  const dai = daiContract(user);\n  const network = getNetwork(user.chainId);\n  const allowance = await dai.allowance(user.account, SMART_TOKEN_ADDRESSES[network]);\n  const daiBal = await getDAIBalance(user);\n  const realDailBal = parseInt(daiBal.div(decimals).toString(), 10);\n  const buyPrice = await getBuyPrice(user, amount, totalSupply);\n  const realBuyPrice = parseInt(buyPrice.toString(), 10);\n\n  if (realDailBal < realBuyPrice) {\n    setMessage(`Your DAI balance is insufficient for this order.`);\n    return false;\n  }\n\n  if (allowance.div(decimals) < buyPrice) {\n    setMessage(`Set allowance for ${buyPrice} DAI to continue order.`);\n    return false;\n  }\n\n  return true;\n};\nexport const buy = async (user, amount) => {\n  const contract = SmartTokenContract(user);\n  const tx = await contract.buy(amount, options);\n  return tx.hash;\n};\nexport const initateBuy = async (user, amount, setMessage) => {\n  let hash;\n  const contract = SmartTokenContract(user);\n  const totalSupply = await contract.totalSupply();\n  const bnAmount = BigNumber.from(amount).mul(decimals);\n  const canBuy = await userCanBuy(user, amount, totalSupply.div(decimals), setMessage);\n\n  if (canBuy) {\n    hash = await buy(user, bnAmount);\n  }\n\n  return hash;\n};\nexport const approve = async (user, amount) => {\n  const network = getNetwork(user.chainId);\n  const dai = daiContract(user);\n  const tx = await dai.approve(SMART_TOKEN_ADDRESSES[network], amount, options);\n  return tx.hash;\n};\nexport const initiateSell = async (user, amount, setMessage) => {\n  const contract = SmartTokenContract(user);\n  let balance = await contract.balanceOf(user.account);\n  balance = parseInt(balance.div(decimals).toString(), 10);\n\n  if (balance < parseInt(amount.toString(), 10)) {\n    setMessage(`Your TOK balance is insufficient for this order.`);\n    return false;\n  }\n\n  const sellAmount = BigNumber.from(amount).mul(decimals);\n  const tx = await contract.sell(sellAmount);\n  return tx.hash;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ManaPoolContract\");\n$RefreshReg$(_c2, \"ManaContract\");","map":{"version":3,"sources":["/Users/kifen/Dev/interview-test/StakePool/packages/frontend/src/services/utils.ts"],"names":["Contract","BigNumber","ManaABI","ManaPoolABI","MANA_POOL_ADDRESS","MANA_ADDRESS","options","gasLimit","decimals","from","pow","getNetwork","chainId","network","ManaPoolContract","user","contract","library","getSigner","ManaContract","abi","getTOKBalance","SmartTokenContract","balance","balanceOf","account","getDAIBalance","daiContract","getBuyPrice","amount","supply","buyPrice","calculatePurchaseReturn","userCanBuy","totalSupply","setMessage","dai","allowance","SMART_TOKEN_ADDRESSES","daiBal","realDailBal","parseInt","div","toString","realBuyPrice","buy","tx","hash","initateBuy","bnAmount","mul","canBuy","approve","initiateSell","sellAmount","sell"],"mappings":"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","sourcesContent":["import { Contract, BigNumber } from 'ethers'\nimport ManaABI from './abis/Mana.json'\nimport ManaPoolABI from './abis/ManaPool.json'\nimport { MANA_POOL_ADDRESS, xMANA_ADDRESS, MANA_ADDRESS } from './constants'\nimport { User } from './types'\n\nconst options = { gasLimit: 286750 }\nlet decimals = BigNumber.from(18)\ndecimals = BigNumber.from(10).pow(decimals)\n\nexport const getNetwork = (chainId?: number): string => {\n  let network: string\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet'\n      break\n    case 97:\n      network = 'Testnet'\n      break\n    default:\n      network = ''\n  }\n\n  return network\n}\n\nexport const ManaPoolContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_POOL_ADDRESS[network],\n    ManaPoolABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const ManaContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_ADDRESS[network],\n    ManaABI.abi,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const getTOKBalance = async (user: User): Promise<BigNumber> => {\n  const contract = SmartTokenContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const getDAIBalance = async (user: User): Promise<BigNumber> => {\n  const contract = daiContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const getBuyPrice = async (\n  user: User,\n  amount: BigNumber,\n  supply: BigNumber,\n): Promise<number> => {\n  const contract = SmartTokenContract(user)\n  const buyPrice = await contract.calculatePurchaseReturn(supply, amount)\n  return buyPrice\n}\n\nexport const userCanBuy = async (\n  user: User,\n  amount: BigNumber,\n  totalSupply: BigNumber,\n  setMessage: (arg0: string) => void,\n): Promise<boolean> => {\n  const dai = daiContract(user)\n  const network: any = getNetwork(user.chainId)\n  const allowance = await dai.allowance(\n    user.account,\n    SMART_TOKEN_ADDRESSES[network],\n  )\n  const daiBal = await getDAIBalance(user)\n  const realDailBal = parseInt(daiBal.div(decimals).toString(), 10)\n\n  const buyPrice = await getBuyPrice(user, amount, totalSupply)\n  const realBuyPrice = parseInt(buyPrice.toString(), 10)\n\n  if (realDailBal < realBuyPrice) {\n    setMessage(`Your DAI balance is insufficient for this order.`)\n    return false\n  }\n\n  if (allowance.div(decimals) < buyPrice) {\n    setMessage(`Set allowance for ${buyPrice} DAI to continue order.`)\n    return false\n  }\n\n  return true\n}\n\nexport const buy = async (user: User, amount: BigNumber): Promise<string> => {\n  const contract = SmartTokenContract(user)\n  const tx = await contract.buy(amount, options)\n  return tx.hash\n}\n\nexport const initateBuy = async (\n  user: User,\n  amount: BigNumber,\n  setMessage: (arg0: string) => void,\n) => {\n  let hash\n  const contract = SmartTokenContract(user)\n  const totalSupply = await contract.totalSupply()\n  const bnAmount = BigNumber.from(amount).mul(decimals)\n  const canBuy = await userCanBuy(\n    user,\n    amount,\n    totalSupply.div(decimals),\n    setMessage,\n  )\n\n  if (canBuy) {\n    hash = await buy(user, bnAmount)\n  }\n\n  return hash\n}\n\nexport const approve = async (user: User, amount: BigNumber) => {\n  const network: any = getNetwork(user.chainId)\n\n  const dai = daiContract(user)\n  const tx = await dai.approve(SMART_TOKEN_ADDRESSES[network], amount, options)\n  return tx.hash\n}\n\nexport const initiateSell = async (\n  user: User,\n  amount: BigNumber,\n  setMessage: (arg0: string) => void,\n) => {\n  const contract = SmartTokenContract(user)\n  let balance = await contract.balanceOf(user.account)\n  balance = parseInt(balance.div(decimals).toString(), 10)\n\n  if (balance < parseInt(amount.toString(), 10)) {\n    setMessage(`Your TOK balance is insufficient for this order.`)\n    return false\n  }\n  const sellAmount = BigNumber.from(amount).mul(decimals)\n  const tx = await contract.sell(sellAmount)\n  return tx.hash\n}\n"]},"metadata":{},"sourceType":"module"}