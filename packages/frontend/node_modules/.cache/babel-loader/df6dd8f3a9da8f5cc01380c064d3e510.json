{"ast":null,"code":"import { Contract, BigNumber } from 'ethers';\nimport ManaABI from './abis/Mana.json';\nimport ManaPoolABI from './abis/ManaPool.json';\nimport { MANA_POOL_ADDRESS, xMANA_ADDRESS, MANA_ADDRESS } from './constants';\nconst options = {\n  gasLimit: 286750\n};\nlet decimals = BigNumber.from(18);\ndecimals = BigNumber.from(10).pow(decimals);\nexport const getNetwork = chainId => {\n  let network;\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet';\n      break;\n\n    case 97:\n      network = 'Testnet';\n      break;\n\n    default:\n      network = '';\n  }\n\n  return network;\n};\nexport const ManaPoolContract = user => {\n  var _user$library;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_POOL_ADDRESS[network], ManaPoolABI, (_user$library = user.library) === null || _user$library === void 0 ? void 0 : _user$library.getSigner());\n  return contract;\n};\n_c = ManaPoolContract;\nexport const ManaContract = user => {\n  var _user$library2;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_ADDRESS[network], ManaABI, (_user$library2 = user.library) === null || _user$library2 === void 0 ? void 0 : _user$library2.getSigner());\n  return contract;\n};\n_c2 = ManaContract;\nexport const xManaContract = user => {\n  var _user$library3;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(xMANA_ADDRESS[network], ManaABI, (_user$library3 = user.library) === null || _user$library3 === void 0 ? void 0 : _user$library3.getSigner());\n  return contract;\n};\nexport const getMANABalance = async user => {\n  const contract = ManaContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const getxManaBalance = async user => {\n  const contract = xManaContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const userCanUnstakeInLockedPool = async (user, unstakeAmount, totalSupply, setMessage) => {\n  const xMana = xManaContract(user);\n  const manaPool = ManaPoolContract(user);\n  const network = getNetwork(user.chainId);\n  const allowance = await xMana.allowance(user.account, MANA_POOL_ADDRESS[network]);\n  const xManaBalance = await getxManaBalance(user);\n\n  if (xManaBalance.lt(unstakeAmount)) {\n    setMessage(`Your xMana balance is insufficient to unstake.`);\n    return false;\n  }\n\n  const canUnstake = await manaPool.canUnstake();\n\n  if (!canUnstake) {\n    const [stakeInfo, lockTime] = await Promise.all([manaPool.lockedPool(user.account)]);\n    const now = Math.floor(Date.now());\n    setMessage(``);\n    return false;\n  }\n\n  return true;\n};\nexport const buy = async (user, amount) => {\n  const contract = SmartTokenContract(user);\n  const tx = await contract.buy(amount, options);\n  return tx.hash;\n};\nexport const initateBuy = async (user, amount, setMessage) => {\n  let hash;\n  const contract = SmartTokenContract(user);\n  const totalSupply = await contract.totalSupply();\n  const bnAmount = BigNumber.from(amount).mul(decimals);\n  const canBuy = await userCanBuy(user, amount, totalSupply.div(decimals), setMessage);\n\n  if (canBuy) {\n    hash = await buy(user, bnAmount);\n  }\n\n  return hash;\n};\nexport const approve = async (user, amount) => {\n  const network = getNetwork(user.chainId);\n  const dai = daiContract(user);\n  const tx = await dai.approve(SMART_TOKEN_ADDRESSES[network], amount, options);\n  return tx.hash;\n};\nexport const initiateSell = async (user, amount, setMessage) => {\n  const contract = SmartTokenContract(user);\n  let balance = await contract.balanceOf(user.account);\n  balance = parseInt(balance.div(decimals).toString(), 10);\n\n  if (balance < parseInt(amount.toString(), 10)) {\n    setMessage(`Your TOK balance is insufficient for this order.`);\n    return false;\n  }\n\n  const sellAmount = BigNumber.from(amount).mul(decimals);\n  const tx = await contract.sell(sellAmount);\n  return tx.hash;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ManaPoolContract\");\n$RefreshReg$(_c2, \"ManaContract\");","map":{"version":3,"sources":["/Users/kifen/Dev/interview-test/StakePool/packages/frontend/src/services/utils.ts"],"names":["Contract","BigNumber","ManaABI","ManaPoolABI","MANA_POOL_ADDRESS","xMANA_ADDRESS","MANA_ADDRESS","options","gasLimit","decimals","from","pow","getNetwork","chainId","network","ManaPoolContract","user","contract","library","getSigner","ManaContract","xManaContract","getMANABalance","balance","balanceOf","account","getxManaBalance","userCanUnstakeInLockedPool","unstakeAmount","totalSupply","setMessage","xMana","manaPool","allowance","xManaBalance","lt","canUnstake","stakeInfo","lockTime","Promise","all","lockedPool","now","Math","floor","Date","buy","amount","SmartTokenContract","tx","hash","initateBuy","bnAmount","mul","canBuy","userCanBuy","div","approve","dai","daiContract","SMART_TOKEN_ADDRESSES","initiateSell","parseInt","toString","sellAmount","sell"],"mappings":"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","sourcesContent":["import { Contract, BigNumber } from 'ethers'\nimport ManaABI from './abis/Mana.json'\nimport ManaPoolABI from './abis/ManaPool.json'\nimport { MANA_POOL_ADDRESS, xMANA_ADDRESS, MANA_ADDRESS } from './constants'\nimport { User } from './types'\n\nconst options = { gasLimit: 286750 }\nlet decimals = BigNumber.from(18)\ndecimals = BigNumber.from(10).pow(decimals)\n\nexport const getNetwork = (chainId?: number): string => {\n  let network: string\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet'\n      break\n    case 97:\n      network = 'Testnet'\n      break\n    default:\n      network = ''\n  }\n\n  return network\n}\n\nexport const ManaPoolContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_POOL_ADDRESS[network],\n    ManaPoolABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const ManaContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_ADDRESS[network],\n    ManaABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const xManaContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    xMANA_ADDRESS[network],\n    ManaABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const getMANABalance = async (user: User): Promise<BigNumber> => {\n  const contract = ManaContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const getxManaBalance = async (user: User): Promise<BigNumber> => {\n  const contract = xManaContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const userCanUnstakeInLockedPool = async (\n  user: User,\n  unstakeAmount: BigNumber,\n  totalSupply: BigNumber,\n  setMessage: (arg0: string) => void,\n): Promise<boolean> => {\n  const xMana = xManaContract(user)\n  const manaPool = ManaPoolContract(user)\n\n  const network: any = getNetwork(user.chainId)\n  const allowance = await xMana.allowance(\n    user.account,\n    MANA_POOL_ADDRESS[network],\n  )\n\n  const xManaBalance = await getxManaBalance(user)\n\n  if (xManaBalance.lt(unstakeAmount)) {\n    setMessage(`Your xMana balance is insufficient to unstake.`)\n    return false\n  }\n\n  const canUnstake = await manaPool.canUnstake()\n  if (!canUnstake) {\n    const [stakeInfo, lockTime] = await Promise.all(\n      [\n        manaPool.lockedPool(user.account),\n        \n      ]\n    )\n\n    const now = Math.floor(Date.now())\n    setMessage(``)\n    return false\n  }\n\n  return true\n}\n\nexport const buy = async (user: User, amount: BigNumber): Promise<string> => {\n  const contract = SmartTokenContract(user)\n  const tx = await contract.buy(amount, options)\n  return tx.hash\n}\n\nexport const initateBuy = async (\n  user: User,\n  amount: BigNumber,\n  setMessage: (arg0: string) => void,\n) => {\n  let hash\n  const contract = SmartTokenContract(user)\n  const totalSupply = await contract.totalSupply()\n  const bnAmount = BigNumber.from(amount).mul(decimals)\n  const canBuy = await userCanBuy(\n    user,\n    amount,\n    totalSupply.div(decimals),\n    setMessage,\n  )\n\n  if (canBuy) {\n    hash = await buy(user, bnAmount)\n  }\n\n  return hash\n}\n\nexport const approve = async (user: User, amount: BigNumber) => {\n  const network: any = getNetwork(user.chainId)\n\n  const dai = daiContract(user)\n  const tx = await dai.approve(SMART_TOKEN_ADDRESSES[network], amount, options)\n  return tx.hash\n}\n\nexport const initiateSell = async (\n  user: User,\n  amount: BigNumber,\n  setMessage: (arg0: string) => void,\n) => {\n  const contract = SmartTokenContract(user)\n  let balance = await contract.balanceOf(user.account)\n  balance = parseInt(balance.div(decimals).toString(), 10)\n\n  if (balance < parseInt(amount.toString(), 10)) {\n    setMessage(`Your TOK balance is insufficient for this order.`)\n    return false\n  }\n  const sellAmount = BigNumber.from(amount).mul(decimals)\n  const tx = await contract.sell(sellAmount)\n  return tx.hash\n}\n"]},"metadata":{},"sourceType":"module"}