{"ast":null,"code":"import { Contract, BigNumber } from 'ethers';\nimport ManaABI from './abis/Mana.json';\nimport ManaPoolABI from './abis/ManaPool.json';\nimport { MANA_POOL_ADDRESS, xMANA_ADDRESS, MANA_ADDRESS } from './constants';\nconst options = {\n  gasLimit: 286750\n};\nlet decimals = BigNumber.from(18);\ndecimals = BigNumber.from(10).pow(decimals);\nexport const getNetwork = chainId => {\n  let network;\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet';\n      break;\n\n    case 97:\n      network = 'Testnet';\n      break;\n\n    default:\n      network = '';\n  }\n\n  return network;\n};\nexport const ManaPoolContract = user => {\n  var _user$library;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_POOL_ADDRESS[network], ManaPoolABI, (_user$library = user.library) === null || _user$library === void 0 ? void 0 : _user$library.getSigner());\n  return contract;\n};\n_c = ManaPoolContract;\nexport const ManaContract = user => {\n  var _user$library2;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(MANA_ADDRESS[network], ManaABI, (_user$library2 = user.library) === null || _user$library2 === void 0 ? void 0 : _user$library2.getSigner());\n  return contract;\n};\n_c2 = ManaContract;\nexport const xManaContract = user => {\n  var _user$library3;\n\n  const network = getNetwork(user.chainId);\n  const contract = new Contract(xMANA_ADDRESS[network], ManaABI, (_user$library3 = user.library) === null || _user$library3 === void 0 ? void 0 : _user$library3.getSigner());\n  return contract;\n};\nexport const getMANABalance = async user => {\n  const contract = ManaContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const getxManaBalance = async user => {\n  const contract = xManaContract(user);\n  const balance = await contract.balanceOf(user.account);\n  return balance;\n};\nexport const userCanUnstakeInLockedPool = async (user, unstakeAmount, totalSupply, setMessage) => {\n  const xMana = xManaContract(user);\n  const manaPool = ManaPoolContract(user);\n  const network = getNetwork(user.chainId);\n  const allowance = await xMana.allowance(user.account, MANA_POOL_ADDRESS[network]);\n  const xManaBalance = await getxManaBalance(user);\n\n  if (xManaBalance.lt(unstakeAmount)) {\n    setMessage(`Your xMana balance is insufficient to unstake.`);\n    return false;\n  }\n\n  const canUnstake = await manaPool.canUnstake();\n\n  if (!canUnstake) {\n    const [stakeInfo, lockTime] = await Promise.all([manaPool.lockedPool(user.account), manaPool.lockTime]);\n    const harvestTime = stakeInfo.stakedTime.add(lockTime);\n    const now = Math.floor(Date.now());\n    setMessage(`Harvest in ${harvestTime - now} seconds`);\n    return false;\n  }\n\n  return true;\n};\nexport const stake = async (user, amount) => {\n  const contract = ManaPoolContract(user);\n  const tx = await contract.buy(amount, options);\n  return tx.hash;\n};\n\nconst userCanBuy = async (user, amount) => {};\n\nexport const initateStake = async (user, amount, setMessage) => {\n  let hash;\n  const contract = ManaPoolContract(user);\n  const allowance = await manaAllowance(user);\n\n  if (allowance.lt(amount)) {\n    setMessage(\"Insufficient allowance\");\n    return false;\n  }\n\n  const bnAmount = BigNumber.from(amount).mul(decimals);\n  const canBuy = await userCanBuy(user, amount, totalSupply.div(decimals), setMessage);\n\n  if (canBuy) {\n    hash = await buy(user, bnAmount);\n  }\n\n  return hash;\n};\nexport const approvexMana = async (user, amount) => {\n  const xMana = xManaContract(user);\n  const txHash = await approve(user, amount, xMana);\n  return txHash;\n};\nexport const approveMana = async (user, amount) => {\n  const mana = ManaContract(user);\n  const txHash = await approve(user, amount, mana);\n  return txHash;\n};\n\nconst approve = async (user, amount, contract) => {\n  const network = getNetwork(user.chainId);\n  const tx = await contract.approve(MANA_POOL_ADDRESS[network], amount, options);\n  return tx.hash;\n};\n\nconst xManaAllowance = async user => {\n  const xMana = xManaContract(user);\n  return await allowance(user, xMana);\n};\n\nconst manaAllowance = async user => {\n  const mana = ManaContract(user);\n  return await allowance(user, mana);\n};\n\nconst allowance = async (user, amount, contract) => {\n  const network = getNetwork(user.chainId);\n  const value = await contract.allownace(user.account, MANA_POOL_ADDRESS[network]);\n  return value;\n}; // export const initiateSell = async (\n//   user: User,\n//   amount: BigNumber,\n//   setMessage: (arg0: string) => void,\n// ) => {\n//   const contract = SmartTokenContract(user)\n//   let balance = await contract.balanceOf(user.account)\n//   balance = parseInt(balance.div(decimals).toString(), 10)\n//   if (balance < parseInt(amount.toString(), 10)) {\n//     setMessage(`Your TOK balance is insufficient for this order.`)\n//     return false\n//   }\n//   const sellAmount = BigNumber.from(amount).mul(decimals)\n//   const tx = await contract.sell(sellAmount)\n//   return tx.hash\n// }\n\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ManaPoolContract\");\n$RefreshReg$(_c2, \"ManaContract\");","map":{"version":3,"sources":["/Users/kifen/Dev/interview-test/StakePool/packages/frontend/src/services/utils.ts"],"names":["Contract","BigNumber","ManaABI","ManaPoolABI","MANA_POOL_ADDRESS","xMANA_ADDRESS","MANA_ADDRESS","options","gasLimit","decimals","from","pow","getNetwork","chainId","network","ManaPoolContract","user","contract","library","getSigner","ManaContract","xManaContract","getMANABalance","balance","balanceOf","account","getxManaBalance","userCanUnstakeInLockedPool","unstakeAmount","totalSupply","setMessage","xMana","manaPool","allowance","xManaBalance","lt","canUnstake","stakeInfo","lockTime","Promise","all","lockedPool","harvestTime","stakedTime","add","now","Math","floor","Date","stake","amount","tx","buy","hash","userCanBuy","initateStake","manaAllowance","bnAmount","mul","canBuy","div","approvexMana","txHash","approve","approveMana","mana","xManaAllowance","value","allownace"],"mappings":"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","sourcesContent":["import { Contract, BigNumber } from 'ethers'\nimport ManaABI from './abis/Mana.json'\nimport ManaPoolABI from './abis/ManaPool.json'\nimport { MANA_POOL_ADDRESS, xMANA_ADDRESS, MANA_ADDRESS } from './constants'\nimport { User } from './types'\n\nconst options = { gasLimit: 286750 }\nlet decimals = BigNumber.from(18)\ndecimals = BigNumber.from(10).pow(decimals)\n\nexport const getNetwork = (chainId?: number): string => {\n  let network: string\n\n  switch (chainId) {\n    case 56:\n      network = 'Mainnet'\n      break\n    case 97:\n      network = 'Testnet'\n      break\n    default:\n      network = ''\n  }\n\n  return network\n}\n\nexport const ManaPoolContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_POOL_ADDRESS[network],\n    ManaPoolABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const ManaContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    MANA_ADDRESS[network],\n    ManaABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const xManaContract = (user: User): Contract => {\n  const network: any = getNetwork(user.chainId)\n  const contract = new Contract(\n    xMANA_ADDRESS[network],\n    ManaABI,\n    user.library?.getSigner(),\n  )\n\n  return contract\n}\n\nexport const getMANABalance = async (user: User): Promise<BigNumber> => {\n  const contract = ManaContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const getxManaBalance = async (user: User): Promise<BigNumber> => {\n  const contract = xManaContract(user)\n  const balance = await contract.balanceOf(user.account)\n  return balance\n}\n\nexport const userCanUnstakeInLockedPool = async (\n  user: User,\n  unstakeAmount: BigNumber,\n  totalSupply: BigNumber,\n  setMessage: (arg0: string) => void,\n): Promise<boolean> => {\n  const xMana = xManaContract(user)\n  const manaPool = ManaPoolContract(user)\n\n  const network: any = getNetwork(user.chainId)\n  const allowance = await xMana.allowance(\n    user.account,\n    MANA_POOL_ADDRESS[network],\n  )\n\n  const xManaBalance = await getxManaBalance(user)\n\n  if (xManaBalance.lt(unstakeAmount)) {\n    setMessage(`Your xMana balance is insufficient to unstake.`)\n    return false\n  }\n\n  const canUnstake = await manaPool.canUnstake()\n  if (!canUnstake) {\n    const [stakeInfo, lockTime] = await Promise.all(\n      [\n        manaPool.lockedPool(user.account),\n        manaPool.lockTime\n      ]\n    )\n\n    const harvestTime = stakeInfo.stakedTime.add(lockTime)\n    const now = Math.floor(Date.now())\n    setMessage(`Harvest in ${harvestTime - now} seconds`)\n    return false\n  }\n\n  return true\n}\n\nexport const stake = async (user: User, amount: BigNumber): Promise<string> => {\n  const contract = ManaPoolContract(user)\n  const tx = await contract.buy(amount, options)\n  return tx.hash\n}\n\nconst userCanBuy = async (user:  User, amount: BigNumber): Promise<bool> => {\n\n}\n\nexport const initateStake = async (\n  user: User,\n  amount: BigNumber,\n  setMessage: (arg0: string) => void,\n) => {\n  let hash\n  const contract = ManaPoolContract(user)\n  const allowance = await manaAllowance(user)\n  if (allowance.lt(amount)) {\n    setMessage(\"Insufficient allowance\")\n    return false\n  }\n  const bnAmount = BigNumber.from(amount).mul(decimals)\n  const canBuy = await userCanBuy(\n    user,\n    amount,\n    totalSupply.div(decimals),\n    setMessage,\n  )\n\n  if (canBuy) {\n    hash = await buy(user, bnAmount)\n  }\n\n  return hash\n}\n\nexport const approvexMana = async (user: User, amount: BigNumber) => {\n  const xMana = xManaContract(user)\n  const txHash = await approve(user, amount, xMana);\n  return txHash\n}\n\nexport const approveMana = async (user: User, amount: BigNumber) => {\n  const mana = ManaContract(user)\n  const txHash = await approve(user, amount, mana);\n  return txHash\n}\n\nconst approve = async (user: User, amount: BigNumber, contract: Contract) => {\n  const network: any = getNetwork(user.chainId)\n  const tx = await contract.approve(MANA_POOL_ADDRESS[network], amount, options)\n  return tx.hash\n}\n\nconst xManaAllowance = async(user: User): Promise<BigNumber> => {\n  const xMana = xManaContract(user)\n  return await allowance(user, xMana)\n}\n\nconst manaAllowance = async(user: User): Promise<BigNumber> => {\n  const mana = ManaContract(user)\n  return await allowance(user, mana)\n}\n\nconst allowance = async (user: User, amount: BigNumber, contract: Contract): Promise<BigNumber> => {\n  const network: any = getNetwork(user.chainId)\n  const value = await contract.allownace(user.account, MANA_POOL_ADDRESS[network])\n  return value\n}\n\n// export const initiateSell = async (\n//   user: User,\n//   amount: BigNumber,\n//   setMessage: (arg0: string) => void,\n// ) => {\n//   const contract = SmartTokenContract(user)\n//   let balance = await contract.balanceOf(user.account)\n//   balance = parseInt(balance.div(decimals).toString(), 10)\n\n//   if (balance < parseInt(amount.toString(), 10)) {\n//     setMessage(`Your TOK balance is insufficient for this order.`)\n//     return false\n//   }\n//   const sellAmount = BigNumber.from(amount).mul(decimals)\n//   const tx = await contract.sell(sellAmount)\n//   return tx.hash\n// }\n"]},"metadata":{},"sourceType":"module"}