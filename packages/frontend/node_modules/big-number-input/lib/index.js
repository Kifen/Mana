"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var units_1 = require("@ethersproject/units");
function BigNumberInput(_a) {
    var decimals = _a.decimals, value = _a.value, onChange = _a.onChange, renderInput = _a.renderInput, autofocus = _a.autofocus, _b = _a.placeholder, placeholder = _b === void 0 ? '0.00' : _b, max = _a.max, min = _a.min;
    var inputRef = React.useRef(null);
    var _c = React.useState(''), inputValue = _c[0], setInputvalue = _c[1];
    // update current value
    React.useEffect(function () {
        if (!value) {
            setInputvalue('');
        }
        else {
            var parseInputValue = void 0;
            try {
                parseInputValue = units_1.parseUnits(inputValue || '0', decimals);
            }
            catch (_a) {
                // do nothing
            }
            if (!parseInputValue || !parseInputValue.eq(value)) {
                setInputvalue(units_1.formatUnits(value, decimals));
            }
        }
    }, [value, decimals, inputValue]);
    React.useEffect(function () {
        if (!renderInput && autofocus && inputRef) {
            var node = inputRef.current;
            node.focus();
        }
    }, [autofocus, inputRef]);
    var updateValue = function (event) {
        var value = event.currentTarget.value;
        if (value === '') {
            onChange(value);
            setInputvalue(value);
            return;
        }
        var newValue;
        try {
            newValue = units_1.parseUnits(value, decimals);
        }
        catch (e) {
            // don't update the input on invalid values
            return;
        }
        var invalidValue = (min && newValue.lt(min)) || (max && newValue.gt(max));
        if (invalidValue) {
            return;
        }
        setInputvalue(value);
        onChange(newValue.toString());
    };
    var inputProps = {
        placeholder: placeholder,
        onChange: updateValue,
        type: 'text',
        value: inputValue,
    };
    return renderInput ? renderInput(__assign({}, inputProps)) : React.createElement("input", __assign({}, inputProps, { ref: inputRef }));
}
exports.BigNumberInput = BigNumberInput;
//# sourceMappingURL=index.js.map